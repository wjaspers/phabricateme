# Provide a consistent environment for the hooks as well as helper
# functions solving common problems
#
# This script will always put you at the top level of the repository to modify
# with several configuration variables set.
#
#
#   STARTING_DIR = The directory where the user started the command
#   TOOL_DIR = The 'util/' directory in git-started, relative
#   TARGET_DIR = The root directory of the repository to act upon
#   LOCAL_DIR = The 'local/' directory to use, under TARGET_DIR
#   SUBMODULE_PATH = Path to git-started as a submodule or empty string
#
# There are many options that can be set in order to tweak the behavior.
# Some options set up defaults, but you can override them through the command
# line invocation as well as in a local config file in
# util/config/git-started-setup
#
# Command line override example for the DEBUG setting:
#    DEBUG=1 util/bin/setup_repository

# Write out a debug message to stderr if debug mode enabled
function debug() {
	if [ "$DEBUG" -ne 0 ]; then
		echo ${1+"$@"} > /dev/stderr
	fi
}

# Clear the current line
function echo_clear_line() {
	printf "\e[G\e[K"
}

# Allow escape codes
function echo_escape {
	printf "%b\n" "$1"
}

# Echo a prompt without a newline
function echo_prompt() {
	printf "%s" "$1"
}

# Get the extension of a filename
# Needs to work with "file.txt" and return "txt", "no_extension" returns ""
# and "some.dir.name/some/path.name.here" shows "here"
# This does not use subshells
function file_extension() {
	local FN="${1##*/}" # Remove path, which might have periods
	local BASE="${FN%.*}" # Remove extension, file may have lots.of.periods or none
	local EXTENSION="${FN:${#BASE}+1}"
	debug "file_extension '$1' is '$EXTENSION'"
	echo "$EXTENSION"
}

# Echos out the file processing "submodule" or the file type for the given
# incoming file
function get_file_type() {
	local TYPE="$(run_all_scripts ${TOOL_DIR}/helpers/file_detection.d "$1")"
	debug "get_file_type result '$TYPE'"
	
	if [ -z "$TYPE" ]; then
		# Failed to detect the type
		debug "get_file_type returning 'unknown'"
		echo "unknown"
		return 1
	fi

	echo "$TYPE"
	return 0
}

# Returns a positive result (exit code 0) if we are currently in a
# git submodule.  Based off https://gist.github.com/sehe/1208393
function is_submodule() {
	local CHILD_DIR PARENT_DIR MODULE_PATH FULL_MODULE_PATH

	# Get the root of this repository
	CHILD_DIR="$(git rev-parse --show-toplevel)"

	if [ -z "$CHILD_DIR" ]; then
		return 1 # Negative
	fi

	# Get the root of the parent repository
	PARENT_DIR="$(cd "$CHILD_DIR/.." && git rev-parse --show-toplevel 2> /dev/null)"

	if [ -z "$PARENT_DIR" ]; then
		return 1 # Negative
	fi

	# List all submodules in parent.  Careful with the subshells
	while read MODULE_PATH; do
		# Get the full path to the module
		FULL_MODULE_PATH="$( cd "$PARENT_DIR" && cd "$MODULE_PATH" && git rev-parse --show-toplevel 2> /dev/null )"

		if [ "$FULL_MODULE_PATH" == "$CHILD_DIR" ]; then
			# This variable is NOT local
			SUBMODULE_PATH="$MODULE_PATH"
			return 0 # Affirmative
		fi
	done < <( cd "$PARENT_DIR"; git submodule --quiet foreach 'echo $path' 2> /dev/null )

	return 1 # Negative
}

# Resolve paths based on an original location.  Useful for figuring out
# what files were requested to be specified when running command-line
# tools.
# Does NOT remove . or .. from paths.  Does not consolidate multiple slashes
# into a single slash.
# Echos the result with quotes.
# Usage:  . "${0%/*}"/git-started-setup    # Set STARTING_DIR
#         FILES="$(resolve_paths "$STARTING_DIR" ${1+"$@"})"
# Parameters:  DirectoryFromWhence FilenameOrPath
function resolve_path() {
	local WHENCE="$1" # Directory that we use for resolution
	local FILE="$2" # Relative or absolute file/path
	local RESULT="$FILE" # Our end result

	if [ "${FILE:0:1}" != "/" ]; then
		RESULT="${WHENCE}/${FILE}"
	fi

	debug "resolve_path '$WHENCE' '$FILE' becomes '$RESULT'"
	echo "$RESULT"
}

# Run all scripts in the given subdirectory, like the run-parts command.
# Exit on error
# Parameters:  DirectoryOfScripts ArgsToPassToScripts
function run_all_scripts() {
	local RESULT SCRIPT
	local DIR="$1"
	shift

	if [ ! -d "$DIR" ]; then
		debug "run_all_scripts '$DIR' no scripts to run"
		# No directory, thus no scripts to run, thus success!
		return 0
	fi

	while read FN; do
		SCRIPT="$DIR/$FN"

		if [ -f "local/$SCRIPT" ]; then
			SCRIPT="local/$SCRIPT"
		fi

		debug "run_all_scripts '$SCRIPT'"
		# Run in subshell so we preserve environment.  Keep current environment
		# variables around for things like the pre-commit hook.
		(
			. "$SCRIPT" ${1+"$@"}
		)

		# Stop if any script reported an error
		RESULT=$?

		if [ $RESULT -ne 0 ]; then
			debug "run_all_scripts result $RESULT"
			return $RESULT
		fi
	done < <(find "$DIR" local/"$DIR" -maxdepth 1 -not -name .\* -type f -or -type l 2>/dev/null | sed "s/.*\\///" | sort | uniq)

	debug "run_all_scripts all passed"
	return 0
}

# Run all helper scripts that match the settings
#
# VariablePrefix is used for determining what settings to use
# HelperDirectory is the name of the directory in util/helpers for scripts
# Filename is the actual filename to work upon
# TargetFile is the filename in the repo or an empty string, in case we
#   copied TargetFile to a temporary file (passed in as parameter 3)
#
# Parameters: VariablePrefix HelperDirectory Filename TargetFile
function run_helpers() {
	local PREFIX="$1" # Prefix for variable to use for programs
	local HELPER_DIR="$2" # Name of directory in helpers.d
	local FILE="$3" # Filename to check or run against
	local TARGET="$4" # Actual filename before it was made into a working copy

	if [ -z "$TARGET" ]; then
		TARGET="$FILE"
	fi

	local FILE_TYPE="$(get_file_type "$TARGET")"
	local CONFIGS_VAR_NAME="${PREFIX}_$( echo "$FILE_TYPE" | tr "a-z" "A-Z" )"
	local CONFIGS CONFIGSCONFIG COMMAND CONFIG_COMMANDS MISSING_COMMANDS RESULT FULL_COMMAND
	eval "CONFIGS=\$$CONFIGS_VAR_NAME"
	HELPER_DIR="util/helpers/${HELPER_DIR}/${FILE_TYPE}"
	debug "run_helpers '$CONFIGS_VAR_NAME' '$HELPER_DIR' '$CONFIGS' '$FILE' '$TARGET'"

	if [ ! -d "${HELPER_DIR}" ]; then
		# No scripts, thus nothing happens.  Don't report an error
		debug 'run_helpers directory does not exist'
		return 0
	fi

	if [ -z "$CONFIGS" ]; then
		# No configuration - skip validation
		debug 'run_helpers nothing to try'
		return 0
	fi

	# Find a configuration that works
	for CONFIG in $CONFIGS; do
		CONFIG_COMMANDS="${CONFIG//+/ /}"
		MISSING_COMMANDS=""

		for COMMAND in $CONFIG_COMMANDS; do
			FULL_COMMAND="${HELPER_DIR}/${COMMAND}"

			if [ ! -f "$FULL_COMMAND" ]; then
				debug "run_helpers Command does not exist: $COMMAND"
				MISSING_COMMANDS="$MISSING_COMMANDS $COMMAND"
			else
				# Run in a subshell for safety
				(
					. "$FULL_COMMAND" ""
				)

				RESULT=$?

				if [ $RESULT -ne 0 ]; then
					debug "run_helpers Command reported failure: $COMMAND"
					MISSING_COMMANDS="$MISSING_COMMANDS $COMMAND"
				fi
			fi
		done

		debug "run_helpers '$CONFIG' failures: $MISSING_COMMANDS"

		if [ -z "$MISSING_COMMANDS" ]; then
			# We have every component - run the linters
			for COMMAND in $CONFIG_COMMANDS; do
				FULL_COMMAND="${HELPER_DIR}/${COMMAND}"

				# Run in subshell so we preserve environment.
				(
					. "$FULL_COMMAND" "$FILE"
				)

				# Stop if any script reported an error
				RESULT=$?
				debug "run_helpers '$CONFIG' '$COMMAND' $RESULT"

				if [ $RESULT -ne 0 ]; then
					return $RESULT
				fi
			done

			# Pass
			debug "run_helpers '$CONFIG' all passed"
			return 0
		fi
	done

	# No matches
	debug "run_helpers nothing matched"
	return 0
}


# Returns information about a file as a string
# Result:  MD5 Mode User:Group Size
# Does not log the last modification date - just info about the content
function stat_file() {
	local FN="$1"
	git hash-object "$FN" | tr -d "\n"
	/usr/bin/stat --format=" %f%a %u:%g %s" "$FN" 2>/dev/null || \
	stat -f " %p %u:%g %z" "$FN"
}

# Create a temporary file and echo out the name
function temporary_file() {
	if test_for_program mktemp; then
		debug "temporary_file mktemp"
		mktemp 2> /dev/null || mktemp -t git-started
		return 0
	fi
	
	if test_for_program gmktemp; then
		debug "temporary_file gmktemp"
		gmktemp
		return 0
	fi

	if test_for_program tempfile; then
		debug "temporary_file tempfile"
		tempfile
		return 0
	fi

	debug "temporary_file manual"
	FN=/tmp/$(date +%c%N|md5sum|cut -b 1-32)

	while [ -f $FN ]; do
		FN=/tmp/$(date +%c%N|md5sum|cut -b 1-32)
	done

	touch $FN
	echo $FN
}

# Attempt to see if a program is in the path and if it can be used.
# Returns true if the program is available.
function test_for_program() {
	local RESULT
	local WHICH="$(which "$1" 2>&1)"
	RESULT=$?

	# No error code
	if [ $RESULT -eq 0 ]; then
		# A string was reported back
		if [ ! -z "$WHICH" ]; then
			# That string is a real filename
			if [ -f "$WHICH" ]; then
				return 0
			else
				debug "test_for_program '$WHICH' file not found"
			fi
		else
			debug "test_for_program '$WHICH' empty string"
		fi
	else
		debug "test_for_program '$WHICH' error code '$RESULT'"
	fi

	return 1
}

# Go to the root of the repository we with to act upon
STARTING_DIR="$(pwd)"
cd "${BASH_SOURCE%/*}" # Go to git-started-setup
cd "$(git rev-parse --show-toplevel)" # Go to the top of the repository
SUBMODULE_PATH=""

if ! is_submodule; then
	TOOL_DIR="util"
	TARGET_DIR="$(pwd)"
	LOCAL_DIR="$(pwd)/local"
else
	TOOL_DIR="${SUBMODULE_PATH}/util"
	cd ..
	cd "$(git rev-parse --show-toplevel)" # Up to the root of the real repo
	TARGET_DIR="$(pwd)"
	LOCAL_DIR="$(pwd)/local"
fi

# Add node programs to the path
if [ -d "node_modules/.bin" ]; then
	PATH="$(pwd)/node_modules/.bin;$PATH"
fi

# Debugging mode - lots of useful debug information gets shown
# when you change this to 1
: ${DEBUG:=0}

# Enable colors - you can use "yes" for always use colors, "no" to never use
# colors, or "auto" for them to be automatically applied if using a terminal
: ${COLOR:="auto"}

# Directories to ignore for ctags, etags, pretty printing, lint checking
# Include trailing slash
IGNORE_DIRS="3rd_party/ node_modules/ vendor/"

# Show messages in pretty colors.  Change or remove colors here.
COLOR_LINT_ERROR="\e[1;31m" # Bright red
COLOR_LINT_FILENAME="\e[1;33m" # Bright yellow
COLOR_PRETTY_ERROR="\e[1;31m" # Bright red
COLOR_PRETTY_FILENAME="\e[1;33m" # Bright yellow
COLOR_PRETTY_MESSAGE="\e[32m" # Green
COLOR_RESET="\e[m" # Reset

# Lint and pretty printer programs to use, by language.
# The list is a series of programs that are tried (see util/helpers/lint.d
# and util/helpers/pretty_print.d) in order until one script detects
# an available program and then it is used for the task.
# To run programs XX, then falling back to YY when XX is not available, use
# LINT_LANG="XX YY"
# To run XX and also run YY if both are available, falling back to XX
# and then falling back further to YY, use
# LINT_LANG="XX+YY XX YY"
# To completely disable
# LINT_LANG=""
LINT_CSS="prettycss"
LINT_JS="jslint jsl"
LINT_JSON="jslint"
LINT_PHP="cli"
LINT_YAML=""

# Same goes for the pretty printers
PRETTY_CSS="prettycss"
PRETTY_JS="jsbeautify unexpand"
PRETTY_MARKDOWN="unexpand"
PRETTY_PHP="phpbeautifier"
PRETTY_YAML="expand"

# Lint command-line options for various language/program pairs
LINT_CSS_PRETTYCSS_OPTIONS="-s --ignore autocorrect --ignore autocorrect-swap --ignore suggest-relative-unit --ignore unofficial"
LINT_JS_JSL_OPTIONS="-nologo -nofilelisting -nosummary -process"
LINT_JS_JSLINT_OPTIONS=""
LINT_JSON_JSLINT_OPTIONS=""
LINT_PHP_CLI_OPTIONS="-d error_reporting=E_ALL -d display_errors=0"

# Pretty printing command-line options
PRETTY_CSS_PRETTYCSS_OPTIONS="-s --ignore autocorrect --ignore autocorrect-swap --ignore suggest-relative-unit --ignore unofficial"
PRETTY_JS_JSBEAUTIFY_OPTIONS="--indent-with-tabs --jslint-happy --brace-style=end-expand"
PRETTY_PHP_PHPBEAUTIFIER_OPTIONS="-t"

# Provide the ability to override the above config with your own values
if [ -f util/config/git-started-setup ]; then
	. util/config/git-started-setup
fi

# Detect if COLOR=auto and if we are on a tty
if [ "$COLOR" == "auto" ]; then
	if [ -t 0 ]; then
		COLOR="yes"
	else
		COLOR="no"
	fi
fi

# If COLOR is "no", clear out all colors
if [ "$COLOR" == "no" ]; then
	unset printenv | grep -o "^COLOR_[^=]"
fi

